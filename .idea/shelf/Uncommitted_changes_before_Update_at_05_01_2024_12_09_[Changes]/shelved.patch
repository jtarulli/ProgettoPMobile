Index: app/src/main/java/com/example/progettopm/fragments/StoricoFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.progettopm.fragments\r\n\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.progettopm.R\r\nimport com.example.progettopm.model.Formazione\r\nimport com.example.progettopm.view.StoricoAdapter\r\nimport com.google.firebase.firestore.DocumentReference\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\n\r\nclass StoricoFragment : Fragment(R.layout.fragment_storico) {\r\n    private lateinit var recyclerView: RecyclerView\r\n    private lateinit var storicoAdapter: StoricoAdapter\r\n    private lateinit var formazioniArrayList: ArrayList<Formazione>\r\n    private lateinit var db: FirebaseFirestore\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = inflater.inflate(R.layout.fragment_storico, container, false)\r\n        recyclerView = view.findViewById(R.id.storicoRecycleView)\r\n        return view\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        setupRecyclerView()\r\n        loadGiocatoriData()\r\n    }\r\n\r\n    private fun setupRecyclerView() {\r\n        storicoAdapter = StoricoAdapter()\r\n        recyclerView.apply {\r\n            layoutManager = LinearLayoutManager(activity)\r\n            //adapter = StoricoAdapter\r\n        }\r\n    }\r\n\r\n    private fun loadGiocatoriData() {\r\n        val formazioniCollection = db.collection(\"formazioni\")\r\n\r\n        formazioniCollection.get()\r\n            .addOnSuccessListener { documents ->\r\n                val datiFormazioneList: ArrayList<Formazione> = ArrayList()\r\n                for (document in documents) {\r\n                    val nomeSquadra = document.getString(\"nomeSquadra\").toString()\r\n                    val giornataRef = document.get(\"giornata\") as DocumentReference\r\n                    val giocatoriSchieratiRef = document.get(\"giocatoriSchierati\") as DocumentReference\r\n                    val id = document.id\r\n                    val punteggio = document.getString(\"punteggio\").toString()\r\n                    val userRef = document.get(\"user\") as DocumentReference\r\n\r\n                    //val salvaDatiFormazione = Formazione(id, giornataRef, userRef, punteggio, nomeSquadra, giocatoriSchieratiRef)\r\n                    //datiFormazioneList.add(salvaDatiFormazione)\r\n                }\r\n\r\n            }\r\n            .addOnFailureListener { exception ->\r\n                Log.w(\"StoricoFragment\", \"Errore nel recupero dei dati\", exception)\r\n            }\r\n    }\r\n\r\n\r\n}
===================================================================
diff --git a/app/src/main/java/com/example/progettopm/fragments/StoricoFragment.kt b/app/src/main/java/com/example/progettopm/fragments/StoricoFragment.kt
--- a/app/src/main/java/com/example/progettopm/fragments/StoricoFragment.kt	
+++ b/app/src/main/java/com/example/progettopm/fragments/StoricoFragment.kt	
@@ -6,65 +6,77 @@
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
+import android.widget.Toast
 import androidx.recyclerview.widget.LinearLayoutManager
 import androidx.recyclerview.widget.RecyclerView
 import com.example.progettopm.R
+import com.example.progettopm.SessionManager
 import com.example.progettopm.model.Formazione
+import com.example.progettopm.model.Lega
 import com.example.progettopm.view.StoricoAdapter
+import com.google.firebase.auth.FirebaseAuth
 import com.google.firebase.firestore.DocumentReference
 import com.google.firebase.firestore.FirebaseFirestore
+import com.google.firebase.firestore.Query
 
-class StoricoFragment : Fragment(R.layout.fragment_storico) {
-    private lateinit var recyclerView: RecyclerView
+class StoricoFragment : Fragment() {
+
+    private lateinit var storicoRecycleView: RecyclerView
     private lateinit var storicoAdapter: StoricoAdapter
-    private lateinit var formazioniArrayList: ArrayList<Formazione>
-    private lateinit var db: FirebaseFirestore
+    private val formazioniList = mutableListOf<Formazione>()
+
     override fun onCreateView(
         inflater: LayoutInflater, container: ViewGroup?,
         savedInstanceState: Bundle?
     ): View? {
         val view = inflater.inflate(R.layout.fragment_storico, container, false)
-        recyclerView = view.findViewById(R.id.storicoRecycleView)
+        storicoRecycleView = view.findViewById(R.id.storicoRecycleView)
         return view
     }
 
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
-        setupRecyclerView()
-        loadGiocatoriData()
-    }
 
-    private fun setupRecyclerView() {
-        storicoAdapter = StoricoAdapter()
-        recyclerView.apply {
-            layoutManager = LinearLayoutManager(activity)
-            //adapter = StoricoAdapter
-        }
+        // Recupero dei dati da Firestore
+        caricaFormazioni()
+
     }
 
-    private fun loadGiocatoriData() {
-        val formazioniCollection = db.collection("formazioni")
+    //metodo per salvar le formazioni
+    private fun caricaFormazioni(){
+        //Controllo che venga scelto lo storico dell'utente loggato e della lega corrente
+        // Ottieni l'istanza dell'utente corrente
+        val user = FirebaseAuth.getInstance().currentUser
+        lateinit var userId: String
+        // Verifica se l'utente è attualmente autenticato
+        if (user != null) {
+            userId = "utenti/" + user.uid.toString()
+            // Ora userId contiene l'ID dell'utente corrente
+        } else {
+            // L'utente non è attualmente autenticato
+        }
 
-        formazioniCollection.get()
-            .addOnSuccessListener { documents ->
-                val datiFormazioneList: ArrayList<Formazione> = ArrayList()
-                for (document in documents) {
-                    val nomeSquadra = document.getString("nomeSquadra").toString()
-                    val giornataRef = document.get("giornata") as DocumentReference
-                    val giocatoriSchieratiRef = document.get("giocatoriSchierati") as DocumentReference
-                    val id = document.id
-                    val punteggio = document.getString("punteggio").toString()
-                    val userRef = document.get("user") as DocumentReference
+        val legaId = SessionManager.legaCorrenteId
+        val formazioniCollection = FirebaseFirestore.getInstance().collection("formazioni")
 
-                    //val salvaDatiFormazione = Formazione(id, giornataRef, userRef, punteggio, nomeSquadra, giocatoriSchieratiRef)
-                    //datiFormazioneList.add(salvaDatiFormazione)
+        formazioniCollection
+            .whereEqualTo("utente", userId)
+          //  .whereEqualTo("legaId", legaId)
+            .orderBy("giornata", Query.Direction.ASCENDING)
+            .get()
+            .addOnSuccessListener { result ->
+                for (document in result) {
+                    val formazione = document.toObject(Formazione::class.java)
+                    formazioniList.add(formazione)
                 }
 
+                // Inizializzazione e associazione dell'adapter alla RecyclerView
+                storicoAdapter = StoricoAdapter(formazioniList)
+                storicoRecycleView.layoutManager = LinearLayoutManager(activity)
+                storicoRecycleView.adapter = storicoAdapter
             }
             .addOnFailureListener { exception ->
-                Log.w("StoricoFragment", "Errore nel recupero dei dati", exception)
+                Toast.makeText(requireContext(), "Errore nel recupero delle formazioni: $exception", Toast.LENGTH_SHORT).show()
             }
     }
-
-
 }
\ No newline at end of file
